
SE-class project To-do list


**********************************completed during sprint 1, 2, 3 ********************************************

1.	Understand the overall project.

2.	Read and understand the research paper provided.

3.	Understand the dependencies of the project file.

4.	Plan for necessary setup.

5.	Planning to choose the right environment.

6.	Change the product backlog after finding the dependencies.

7.	Understand the working of all Java files.

8.	Understand the working of compiler dependencies files.

9.	Compile all the java programs for the prolog Machine.

10.	Execute add.pl,big.pl,lambdas.pl,mperms.pl,perms.pl,queens.pl,sud4x.pl and check the output which are useful later for comparison.

11.	Understand the implementation of given java program Clause.java		
	
12	Understand the implementation of given java program  Obstack.java	

13.	Understand the implementation of given java program  Toks.java		

14.	Understand the implementation of given java program IntStack.java	

15.	Implement the java program Clause.java in C++ . 			

16.	Implement the java program Toks.java in C++ .				
	
17.	Implement the java program IntStack.java in C++ .			

18.	Implement the java program Obstack.java in C++ .			

19.	Perform testing for the Clause.CPP file.				

20.	Understand the implementation of given java program  Imap.java		

21.	Understand the implementation of given java program  Intlist.java	

22.	Understand the implementation of given java program  Prog.java	

23.	Understand the implementation of given java program  IntMap.java	

24.	Understand the implementation of given java program  Spine.java

25.	Implement the java program Imap.java in C++ . 				

26.	Implement the java program Intlist.java in C++ .			

27.	Implement the java program Prog.java in C++ .
	
28.	Implement the java program Spine.java in C++ 				

29.	Perform testing for the Toks.CPP file					

30.	Perform testing for the IntStack.CPP file				

31.	Perform testing for the Obstack.CPP file				

32.	Perform testing for the prog.CPP file	
				

*********************************************************************************************************************************
				
**************************************************incomplete in sprint 3*********************************************************

33.	Understand the implementation of given java program  Engine.java	-priority High

*********************************************************************************************************************************

34. 	Resolve the bugs in IntList.CPP						-priority High

35.	test for bugs by combining dependent programs.				-priority High

36.	Implement the java program Engine.java in C++ .				-priority High

37.	Implement the java program IntMap.java in C++ .				-priority High
	
38.	Implement the java program Main.java in C++ .				-priority High
				
39.	Perform testing for the Engine.CPP file					-priority High

40.	Perform testing for the Imap.CPP file					-priority Medium

41.	Perform testing for the Intlist.CPP file				-priority Medium

42.	Perform testing for the IntMap.CPP file					-priority Medium

43.	Perform testing for the Main.CPP file					-priority Medium

44.	Perform testing for the Spine.CPP file					-priority Medium

45.	Test the C++ compiler by combining all the C++ code.			-priority Medium

46.	Execute add.pl prolog program with C++ compiler and compare it with the java compiler output to verify the correctness.	-priority low

47.	Execute big.pl prolog program with C++ compiler and compare it with the java compiler output to verify the correctness.	-priority low

48.	Execute lambdas.pl prolog program with C++ compiler and compare it with the java compiler output to verify the correctness.	-priority low

49.	Execute mperms.pl prolog program with C++ compiler and compare it with the java compiler output to verify the correctness.	-priority low

50.	Execute perms.pl prolog program with C++ compiler and compare it with the java compiler output to verify the correctness.	-priority low

51.	Execute queens.pl prolog program with C++ compiler and compare it with the java compiler output to verify the correctness.	-priority low

52.	Execute sud4X.pl prolog program with C++ compiler and compare it with the java compiler output to verify the correctness.	-priority low













